when one call back function passes into the other callback function and this cycle goes on deep by nesting the callback functions then it is known as callback hell

function fetchUser(userId, callback) {
    setTimeout(() => {
        console.log(`Fetched user with ID: ${userId}`);
        callback({ userId, name: "John Doe" });
    }, 1000);
}

function fetchOrders(userId, callback) {
    setTimeout(() => {
        console.log(`Fetched orders for user ID: ${userId}`);
        callback([{ orderId: 1, item: "Laptop" }, { orderId: 2, item: "Phone" }]);
    }, 1000);
}

function fetchOrderDetails(orderId, callback) {
    setTimeout(() => {
        console.log(`Fetched details for order ID: ${orderId}`);
        callback({ orderId, status: "Shipped", deliveryDate: "2024-12-30" });
    }, 1000);
}

// Callback Hell
fetchUser(101, (user) => {
    fetchOrders(user.userId, (orders) => {
        fetchOrderDetails(orders[0].orderId, (orderDetails) => {
            console.log(`Order details:`, orderDetails);
        });
    });
});



***************************************************************************************************
The other main problem is inversion of control because the control of the function is given to the other functions in which the callback functions are called 
